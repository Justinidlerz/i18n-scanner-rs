/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Member {
  name: string
  type: I18nType
  ns?: string
}
export interface I18NPackage {
  packagePath: string
  members: Array<Member>
}
/**
 * Preset 5 types for collecting translation keys:
 * 1. Hook
 *     : const { t } = useTranslation(ns);
 * 2. GlobalT
 *     : t('key', { ns: 'ns' });
 * 3. TranslationComp
 *     : <Translation ns="ns">
 *         {(t) => {
 *             return t(key)
 *          }}
 *       </Translation>
 * 4. TransComp
 *     : <Trans i18nKey="key" ns="ns"></Trans>
 * 5. HocWrapper
 *     :
 *     const Component = ({ t }) => {
 *         return <div>{t(key)}</div>
 *     }
 *     const hocWrapper = withTranslation(ns)(Component);
 * 6. ObjectMemberT
 *     : i18n.t('key', { ns: 'ns' })
 *
 * Those 6 types are calls `t` method to translate except `TransComp`
 */
export const enum I18nType {
  Hook = 'Hook',
  TMethod = 'TMethod',
  TransComp = 'TransComp',
  TranslationComp = 'TranslationComp',
  HocWrapper = 'HocWrapper',
  ObjectMemberT = 'ObjectMemberT'
}
export interface Payload {
  tsconfigPath: string
  entryPaths: Array<string>
  externals: Array<string>
  extendI18NPackages?: Array<I18NPackage>
}
/**
 * This will follow the below flows to collect all the
 * I18n contents via passed entry file
 * 1. analyze all file references from the entry file
 * 2. find all import statements are includes the list below:
 *    - import * from 'i18next'
 *    - import * from 'react-i18next'
 * 3. find out the variable linked to the import statement
 * 4. recursively analyze the variable's references
 * 5. collect the first parameter of i18n function call
 *    or bypass from another function wrapped by the i18n function
 */
export declare function scan(payload: Payload): Record<string, Array<string>>
